"""
Повний перебір
Вася зібрався у похід з друзями-програмістами і вирішив відповідально підійти до вибору того,
що він візьме з собою. У Васі є n речей, які він міг би взяти з собою у рюкзаку.
Кожна річ важить 1 кілограм. Речі мають різну "користність" для Васі.
Похід очікується досить тривалий, і Вася хотів би носити рюкзак вагою не більше w кілограм.
Допоможіть йому визначить максимальну сумарну "корисність" предметів у нього в рюкзаку при
вазі рюкзака не більше w кілограм.
Оскільки системи станів задачі є дискретною, її можна розв’язавши, повністю перебравши всі
можливі розв’язки. Отже, у нас є n речей, які можна укладати в рюкзак.
Для кожного предмета існує 2 варіанти: предмет або кладеться в рюкзак, або ні.
Тоді, як ми знаємо, алгоритм, що використовує повний перебір всіх можливих варіантів має складність O (2^n).
Це дозволяє його використовувати лише для невеликої кількості предметів.
З ростом кількості предметів задача стає нерозв'язною даним методом за прийнятний час.
"""


def max_score(weight, score, num):
    """
    :param weight: поточна вага рюкзака
    :param score:  поточна вартість рюкзака
    :param num:    номер предмета
    """
    global maxScore, W, n

    # досягли максимальної глибини рекурсії
    if weight == W or num >= n:   # якщо вага рюкзака W або речі закінчилися
        if score > maxScore:      # порівнюємо поточну вартість рюкзака
                                  # з поточною максимальною варістю знайденою раніше
            maxScore = score
        return

    # розгалуження
    max_score(weight,     score,          num + 1)  # предмет не кладемо у рюкзак
    max_score(weight + 1, score + a[num], num + 1)  # предмет кладемо у рюкзак


maxScore = 0                         # максимальна вартість рюкзака
W, n = map(int, input().split())     # вага рюкзака і кількість різних речей
a = list(map(int, input().split()))  # список цінностей речей
a.sort()
max_score(0, 0, 0)                   # старт рекурсивної функції
print(maxScore)                      # виведення результату
